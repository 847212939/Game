$#include "../Game/stdafx.h"

enum LogLevel
{
	LOG_INFO = 0,							//info
	LOG_WARN,								//warnning
	LOG_ERROR,								//error
	LOG_CINFO,								//info Console tip
	LOG_CERROR,								//error Console
	LOG_ERROR_SYS,							//error system
	LOG_END,
};

class ConfigMgr
{ 
public:
	ConfigMgr();
	~ConfigMgr();

public:
	// 日志打印
	void CoutLog(int level, const char* log);

public:
	// 基础配置
	void ReadLogicCfg(LogicCfg* config);
	void ReadDbCfg(DbCfg* config);
	void ReadThreadCntCfg(int cnt);
	void ReadServerIDCfg(int id);
	void ReadLogPrintTmCfg(int tm);
	void ReadMaxSocketCntCfg(int cnt);
	void ReadExitCfg(std::string exit);
	void ReadTimerCntCfg(int cnt);
	void ReadKeyCfg(std::string key);
	void ReadOpenServerTime(std::string servertm);

public:
	// 活动
	void ReadActivityList(ActivityList* config);
	void ReadBrushMonsterCfg(BrushMonsterCfg* config);
	void ReadActivityBreakdownCfg(ActivityBreakdown* config);

};

struct LogicCfg
{
	std::string ip;
	int port;

	LogicCfg();
	~LogicCfg();
};

struct DbCfg
{
	std::string ip;
	std::string user;
	std::string passwd;
	std::string database;
	int port;

	DbCfg();
	~DbCfg();
};

struct ActivityList
{
	int id;
	int type;
	int sid;
	int activityBreakdown;
	ActivityList();
	~ActivityList();
	void AddBeginTime(int tm);
	void AddEndTime(int tm);
	void AddSolidTime(int tm);
	void AddOpenServerTime(int tm);
};

struct ActivityBreakdown
{
	int id;
	int dayBreakdown;
	int hourBreakdown;
	ActivityBreakdown();
	~ActivityBreakdown();
	void AddDayBreakdownList(int idex, int tm);
	void AddHourBreakdownList(int idex, int tm);
};

struct BrushMonsterCfg
{
	int id;
	int sid;
	int mid;
	int count;
	int delayTime;
	int refreshTime;
	int x;
	int y;
	BrushMonsterCfg();
	~BrushMonsterCfg();
};
